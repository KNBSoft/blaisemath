/*
 * GraphExplorerMain.java
 * Created on May 14, 2010, 10:10:30 AM
 */

package graphexplorer;

import data.propertysheet.PropertySheet;
import data.propertysheet.editor.EditorRegistration;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.geom.Point2D;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JDialog;
import javax.swing.UIManager;
import javax.swing.event.TableModelEvent;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import org.bm.blaise.scio.graph.Graph;
import org.bm.blaise.scio.graph.LongitudinalGraph;
import org.bm.blaise.scio.graph.layout.IterativeGraphLayout;
import org.bm.blaise.scio.graph.layout.StaticGraphLayout;
import org.bm.blaise.scio.graph.metrics.NodeMetric;
import org.bm.blaise.scio.graph.metrics.subset.AdditiveSubsetMetric;
import org.bm.blaise.scio.graph.metrics.subset.ContractiveSubsetMetric;
import org.bm.blaise.scio.graph.metrics.subset.CooperationSubsetMetric;
import org.bm.blaise.specto.plane.graph.PlaneGraph;
import org.bm.blaise.specto.plane.graph.PlaneGraphBean;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.YIntervalRenderer;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import visometry.plane.PlanePlotComponent;
import visometry.plottable.Plottable;

/**
 *
 * @author Elisha Peterson
 */
public class GraphExplorerMain_backup extends javax.swing.JFrame
        implements GraphExplorerInterface, PropertyChangeListener {

    /** Controller */
    GraphControllerMaster controller;

    /** Tracks the active graph in the explorer */
    PlaneGraph activeGraph;
    /** Stores current bean for adjusting visual settings */
    PlaneGraphBean graphBean;

    /** Chart displaying statistical data */
    ChartPanel distributionCP;

    /** Creates new form GraphExplorerMain */
    public GraphExplorerMain_backup() {
        try { UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); } catch (Exception e) { }
        EditorRegistration.registerEditors();
        initActions();
        initComponents();

        JFreeChart distributionFC = ChartFactory.createXYBarChart("Metric Distribution", "Value", false, "Number", null, PlotOrientation.VERTICAL, false, true, false);
        distributionCP = new ChartPanel(distributionFC);
        distributionCP.setPreferredSize(new Dimension(400,300));
        boxP2.add(distributionCP, BorderLayout.CENTER);

        toolbar.add(javax.swing.Box.createHorizontalGlue());
    }

    /** General actions */
    ExplorerActions actions;
    /** File/IO actions */
    ExplorerIOActions actions_io;
    /** Statistics/metric actions */
    ExplorerStatActions actions_stat;
    /** Layout actions */
    ExplorerLayoutActions actions_layout;
    /** Graph-generation actions */
    ExplorerGenerateActions actions_gen;

    private void initActions() {
        controller = new GraphControllerMaster();
        controller.addPropertyChangeListener(this);

        actions_io = new ExplorerIOActions(controller);
        actions_gen = new ExplorerGenerateActions(controller);
        actions_layout = new ExplorerLayoutActions(null); // needs single controller
        actions_stat = new ExplorerStatActions(null); // needs single controller

        actions = new ExplorerActions(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelPS = new data.propertysheet.PropertySheet();
        edgePS = new data.propertysheet.PropertySheet();
        nodePS = new data.propertysheet.PropertySheet();
        layoutPS = new data.propertysheet.PropertySheet();
        mainTM = new graphexplorer.GraphTableModel();
        distributionTableSP = new javax.swing.JScrollPane();
        distributionTable = new javax.swing.JTable();
        newPM = new javax.swing.JPopupMenu();
        emptyMI1 = new javax.swing.JMenuItem();
        circleMI1 = new javax.swing.JMenuItem();
        starMI1 = new javax.swing.JMenuItem();
        wheelMI1 = new javax.swing.JMenuItem();
        completeMI1 = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        uniform1MI1 = new javax.swing.JMenuItem();
        preferentialMI1 = new javax.swing.JMenuItem();
        layoutPM = new javax.swing.JPopupMenu();
        circularMI1 = new javax.swing.JMenuItem();
        randomMI1 = new javax.swing.JMenuItem();
        energyStartMI1 = new javax.swing.JMenuItem();
        toolbar = new javax.swing.JToolBar();
        newTBB = new javax.swing.JButton();
        loadTBB = new javax.swing.JButton();
        saveTBB = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        layoutTBB = new javax.swing.JButton();
        energyTBB = new javax.swing.JToggleButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        jLabel1 = new javax.swing.JLabel();
        metricCB1 = new javax.swing.JComboBox();
        mainSP = new javax.swing.JSplitPane();
        graphTP = new javax.swing.JTabbedPane();
        propertySP = new javax.swing.JScrollPane();
        propertyRP = new gui.RollupPanel();
        boxPanel = new javax.swing.JPanel();
        boxP1 = new javax.swing.JPanel();
        boxTP1 = new javax.swing.JTabbedPane();
        mainTableP = new javax.swing.JPanel();
        mainTableTB = new javax.swing.JToolBar();
        metricL = new javax.swing.JLabel();
        metricCB = new javax.swing.JComboBox();
        mainTableSP = new javax.swing.JScrollPane();
        mainTable = new javax.swing.JTable();
        boxP2 = new javax.swing.JPanel();
        boxP3 = new javax.swing.JPanel();
        boxP4 = new javax.swing.JPanel();
        outputSP = new javax.swing.JScrollPane();
        outputTP = new javax.swing.JTextPane();
        menu = new javax.swing.JMenuBar();
        fileM = new javax.swing.JMenu();
        newM = new javax.swing.JMenu();
        emptyMI = new javax.swing.JMenuItem();
        circleMI = new javax.swing.JMenuItem();
        starMI = new javax.swing.JMenuItem();
        wheelMI = new javax.swing.JMenuItem();
        completeMI = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        uniform1MI = new javax.swing.JMenuItem();
        preferentialMI = new javax.swing.JMenuItem();
        loadM = new javax.swing.JMenu();
        loadEdgeListMI = new javax.swing.JMenuItem();
        loadPajekMI = new javax.swing.JMenuItem();
        loadPajekMI2 = new javax.swing.JMenuItem();
        loadPajekXMI = new javax.swing.JMenuItem();
        loadPajekXLongMI = new javax.swing.JMenuItem();
        loadPajekMI1 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        saveEdgeListMI = new javax.swing.JMenuItem();
        savePajekMI = new javax.swing.JMenuItem();
        savePajekMI1 = new javax.swing.JMenuItem();
        savePajekXMI = new javax.swing.JMenuItem();
        savePajekXMI2 = new javax.swing.JMenuItem();
        savePajekXMI1 = new javax.swing.JMenuItem();
        closeMI = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        exportM = new javax.swing.JMenu();
        exportQTMI = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        quitMI = new javax.swing.JMenuItem();
        layoutM = new javax.swing.JMenu();
        circularMI = new javax.swing.JMenuItem();
        randomMI = new javax.swing.JMenuItem();
        energyM = new javax.swing.JMenu();
        energyStartMI = new javax.swing.JMenuItem();
        energyStopMI = new javax.swing.JMenuItem();
        energyIterateMI = new javax.swing.JMenuItem();
        metricM = new javax.swing.JMenu();
        cooperationMI = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        distDegreeMI = new javax.swing.JMenuItem();
        distDegree2MI = new javax.swing.JMenuItem();
        distCliqueMI = new javax.swing.JMenuItem();
        distClique2MI = new javax.swing.JMenuItem();
        distClique2MI1 = new javax.swing.JMenuItem();
        distClique2MI2 = new javax.swing.JMenuItem();
        distDecay25MI = new javax.swing.JMenuItem();
        distDecay50MI = new javax.swing.JMenuItem();
        distDecay75MI = new javax.swing.JMenuItem();
        distDecayCustomMI = new javax.swing.JMenuItem();
        helpM = new javax.swing.JMenu();
        aboutMI = new javax.swing.JMenuItem();
        contentMI = new javax.swing.JMenuItem();

        mainTM.addTableModelListener(new javax.swing.event.TableModelListener() {
            public void tableChanged(javax.swing.event.TableModelEvent evt) {
                mainTMTableChanged(evt);
            }
        });

        distributionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        distributionTableSP.setViewportView(distributionTable);

        emptyMI1.setAction(actions_gen.GENERATE_EMPTY);
        emptyMI1.setText("Empty Graph");
        newPM.add(emptyMI1);

        circleMI1.setAction(actions_gen.GENERATE_CIRCLE);
        circleMI1.setText("Circle Graph");
        newPM.add(circleMI1);

        starMI1.setAction(actions_gen.GENERATE_STAR);
        starMI1.setText("Star Graph");
        newPM.add(starMI1);

        wheelMI1.setAction(actions_gen.GENERATE_WHEEL);
        wheelMI1.setText("Wheel Graph");
        newPM.add(wheelMI1);

        completeMI1.setAction(actions_gen.GENERATE_COMPLETE);
        completeMI1.setText("Complete Graph");
        newPM.add(completeMI1);
        newPM.add(jSeparator5);

        uniform1MI1.setAction(actions_gen.GENERATE_RANDOM);
        uniform1MI1.setText("Uniform random graph...");
        newPM.add(uniform1MI1);

        preferentialMI1.setAction(actions_gen.GENERATE_PREFERENTIAL);
        preferentialMI1.setText("Preferential Attachment...");
        newPM.add(preferentialMI1);

        circularMI1.setAction(actions_layout.LAYOUT_CIRCULAR);
        circularMI1.setText("Circular");
        layoutPM.add(circularMI1);

        randomMI1.setAction(actions_layout.LAYOUT_RANDOM);
        randomMI1.setText("Random");
        layoutPM.add(randomMI1);

        energyStartMI1.setAction(actions_layout.LAYOUT_ENERGY_START);
        energyStartMI1.setText("Start");
        layoutPM.add(energyStartMI1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Graph Explorer");

        toolbar.setRollover(true);

        newTBB.setText("New...");
        newTBB.setComponentPopupMenu(newPM);
        newTBB.setFocusable(false);
        newTBB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newTBB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        newTBB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newTBBActionPerformed(evt);
            }
        });
        toolbar.add(newTBB);

        loadTBB.setAction(actions_io.LOAD_PAJEK_ACTION);
        loadTBB.setText("Load");
        loadTBB.setFocusable(false);
        loadTBB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        loadTBB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolbar.add(loadTBB);

        saveTBB.setAction(actions_io.SAVE_PAJEK_ACTION);
        saveTBB.setText("Save");
        saveTBB.setFocusable(false);
        saveTBB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveTBB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolbar.add(saveTBB);
        toolbar.add(jSeparator2);

        layoutTBB.setText("Layout...");
        layoutTBB.setFocusable(false);
        layoutTBB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        layoutTBB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        layoutTBB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                layoutTBBActionPerformed(evt);
            }
        });
        toolbar.add(layoutTBB);

        energyTBB.setText("Play");
        energyTBB.setToolTipText("Plays/pauses energy layout mechanism for current graph");
        energyTBB.setFocusable(false);
        energyTBB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        energyTBB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        energyTBB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                energyTBBActionPerformed(evt);
            }
        });
        toolbar.add(energyTBB);
        toolbar.add(jSeparator3);

        jLabel1.setFont(new java.awt.Font("Tahoma", 2, 13));
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("Metric: ");
        toolbar.add(jLabel1);

        metricCB1.setModel(new DefaultComboBoxModel(graphexplorer.ExplorerStatActions.StatEnum.values()));
        metricCB1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metricCB1ActionPerformed(evt);
            }
        });
        toolbar.add(metricCB1);

        getContentPane().add(toolbar, java.awt.BorderLayout.NORTH);

        mainSP.setDividerSize(8);
        mainSP.setOneTouchExpandable(true);

        graphTP.setPreferredSize(new java.awt.Dimension(500, 500));
        graphTP.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                graphTPStateChanged(evt);
            }
        });
        mainSP.setRightComponent(graphTP);

        propertySP.setPreferredSize(new java.awt.Dimension(200, 400));
        propertySP.setViewportView(propertyRP);

        mainSP.setLeftComponent(propertySP);

        getContentPane().add(mainSP, java.awt.BorderLayout.CENTER);

        boxPanel.setPreferredSize(new java.awt.Dimension(600, 300));
        boxPanel.setLayout(new javax.swing.BoxLayout(boxPanel, javax.swing.BoxLayout.LINE_AXIS));

        boxP1.setLayout(new java.awt.BorderLayout());

        boxTP1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

        mainTableP.setLayout(new java.awt.BorderLayout());

        mainTableTB.setFloatable(false);
        mainTableTB.setRollover(true);

        metricL.setText("Metric: ");
        mainTableTB.add(metricL);

        metricCB.setModel(new DefaultComboBoxModel(graphexplorer.ExplorerStatActions.StatEnum.values()));
        metricCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metricCBActionPerformed(evt);
            }
        });
        mainTableTB.add(metricCB);

        mainTableP.add(mainTableTB, java.awt.BorderLayout.PAGE_START);

        mainTable.setModel(mainTM);
        mainTableSP.setViewportView(mainTable);

        mainTableP.add(mainTableSP, java.awt.BorderLayout.CENTER);

        boxTP1.addTab("Table of Vertices", mainTableP);

        boxP1.add(boxTP1, java.awt.BorderLayout.CENTER);

        boxPanel.add(boxP1);

        boxP2.setLayout(new java.awt.BorderLayout());
        boxPanel.add(boxP2);

        boxP3.setLayout(new java.awt.BorderLayout());
        boxPanel.add(boxP3);

        boxP4.setLayout(new java.awt.BorderLayout());

        outputSP.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        outputTP.setBackground(new java.awt.Color(0, 0, 0));
        outputTP.setForeground(new java.awt.Color(204, 204, 255));
        outputTP.setText("== Output ==\n");
        outputTP.setPreferredSize(new java.awt.Dimension(500, 200));
        outputSP.setViewportView(outputTP);

        boxP4.add(outputSP, java.awt.BorderLayout.CENTER);

        boxPanel.add(boxP4);

        getContentPane().add(boxPanel, java.awt.BorderLayout.PAGE_END);

        fileM.setText("File");

        newM.setText("New Graph");

        emptyMI.setAction(actions_gen.GENERATE_EMPTY);
        emptyMI.setText("Empty Graph");
        newM.add(emptyMI);

        circleMI.setAction(actions_gen.GENERATE_CIRCLE);
        circleMI.setText("Circle Graph");
        newM.add(circleMI);

        starMI.setAction(actions_gen.GENERATE_STAR);
        starMI.setText("Star Graph");
        newM.add(starMI);

        wheelMI.setAction(actions_gen.GENERATE_WHEEL);
        wheelMI.setText("Wheel Graph");
        newM.add(wheelMI);

        completeMI.setAction(actions_gen.GENERATE_COMPLETE);
        completeMI.setText("Complete Graph");
        newM.add(completeMI);
        newM.add(jSeparator1);

        uniform1MI.setAction(actions_gen.GENERATE_RANDOM);
        uniform1MI.setText("Uniform random graph...");
        newM.add(uniform1MI);

        preferentialMI.setAction(actions_gen.GENERATE_PREFERENTIAL);
        preferentialMI.setText("Preferential Attachment...");
        newM.add(preferentialMI);

        fileM.add(newM);

        loadM.setText("Load graph from file");

        loadEdgeListMI.setAction(actions_io.LOAD_EDGELIST_ACTION);
        loadEdgeListMI.setText("Edge list format (.txt)");
        loadM.add(loadEdgeListMI);

        loadPajekMI.setAction(actions_io.LOAD_PAJEK_ACTION);
        loadPajekMI.setText("Pajek format (.net)");
        loadM.add(loadPajekMI);

        loadPajekMI2.setAction(actions_io.LOAD_PAJEKLONG_ACTION);
        loadPajekMI2.setText("Pajek format - longitudinal (.net)");
        loadM.add(loadPajekMI2);

        loadPajekXMI.setAction(actions_io.LOAD_PAJEKX_ACTION);
        loadPajekXMI.setText("Extended Pajek format (.netx)");
        loadM.add(loadPajekXMI);

        loadPajekXLongMI.setAction(actions_io.LOAD_PAJEKXLONG_ACTION);
        loadPajekXLongMI.setText("Extended Pajek format - longitudinal (.netl)");
        loadM.add(loadPajekXLongMI);

        loadPajekMI1.setAction(actions_io.LOAD_UCINET_ACTION);
        loadPajekMI1.setText("UCINet format (.dat)");
        loadM.add(loadPajekMI1);

        fileM.add(loadM);

        jMenu1.setText("Save graph to file");

        saveEdgeListMI.setAction(actions_io.SAVE_EDGELIST_ACTION);
        saveEdgeListMI.setText("Edge list format (.txt)");
        jMenu1.add(saveEdgeListMI);

        savePajekMI.setAction(actions_io.SAVE_PAJEK_ACTION);
        savePajekMI.setText("Pajek format (.net)");
        jMenu1.add(savePajekMI);

        savePajekMI1.setAction(actions_io.SAVE_PAJEKLONG_ACTION);
        savePajekMI1.setText("Pajek format - longitudinal (.net)");
        jMenu1.add(savePajekMI1);

        savePajekXMI.setAction(actions_io.SAVE_PAJEKX_ACTION);
        savePajekXMI.setText("Extended Pajek format (.netx)");
        jMenu1.add(savePajekXMI);

        savePajekXMI2.setAction(actions_io.SAVE_PAJEKXLONG_ACTION);
        savePajekXMI2.setText("Extended Pajek format - longitudinal (.netl)");
        jMenu1.add(savePajekXMI2);

        savePajekXMI1.setAction(actions_io.SAVE_UCINET_ACTION);
        savePajekXMI1.setText("UCINet format (.dat)");
        jMenu1.add(savePajekXMI1);

        fileM.add(jMenu1);

        closeMI.setAction(actions_io.CLOSE_ACTION);
        closeMI.setText("Close current graph");
        fileM.add(closeMI);
        fileM.add(jSeparator7);

        exportM.setText("Export");

        exportQTMI.setAction(actions_io.EXPORT_QT);
        exportQTMI.setText("Quicktime movie (.mov)");
        exportM.add(exportQTMI);

        fileM.add(exportM);
        fileM.add(jSeparator6);

        quitMI.setAction(actions_io.QUIT_ACTION);
        quitMI.setText("Quit");
        fileM.add(quitMI);

        menu.add(fileM);

        layoutM.setText("Layout");

        circularMI.setAction(actions_layout.LAYOUT_CIRCULAR);
        circularMI.setText("Circular");
        layoutM.add(circularMI);

        randomMI.setAction(actions_layout.LAYOUT_RANDOM);
        randomMI.setText("Random");
        layoutM.add(randomMI);

        energyM.setText("Energy");

        energyStartMI.setAction(actions_layout.LAYOUT_ENERGY_START);
        energyStartMI.setText("Start");
        energyM.add(energyStartMI);

        energyStopMI.setAction(actions_layout.LAYOUT_ENERGY_STOP);
        energyStopMI.setText("Stop");
        energyM.add(energyStopMI);

        energyIterateMI.setAction(actions_layout.LAYOUT_ENERGY_ITERATE);
        energyIterateMI.setText("Iterate");
        energyM.add(energyIterateMI);

        layoutM.add(energyM);

        menu.add(layoutM);

        metricM.setText("Metrics");

        cooperationMI.setText("Compute Cooperation");
        cooperationMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cooperationMIActionPerformed(evt);
            }
        });
        metricM.add(cooperationMI);
        metricM.add(jSeparator4);

        distDegreeMI.setAction(actions_stat.STAT_DEGREE);
        distDegreeMI.setText("Degree");
        metricM.add(distDegreeMI);

        distDegree2MI.setAction(actions_stat.STAT_DEGREE2);
        distDegree2MI.setText("2nd Order Degree");
        metricM.add(distDegree2MI);

        distCliqueMI.setAction(actions_stat.STAT_CLIQUE);
        distCliqueMI.setText("Clique Count");
        metricM.add(distCliqueMI);

        distClique2MI.setAction(actions_stat.STAT_CLIQUE2);
        distClique2MI.setText("2nd Order Clique Count");
        metricM.add(distClique2MI);

        distClique2MI1.setAction(actions_stat.STAT_BETWEEN);
        distClique2MI1.setText("Betweenness Centrality");
        metricM.add(distClique2MI1);

        distClique2MI2.setAction(actions_stat.STAT_EIGEN);
        distClique2MI2.setText("Eigenvalue Centrality");
        metricM.add(distClique2MI2);

        distDecay25MI.setAction(actions_stat.STAT_DECAY_25);
        distDecay25MI.setText("Decay Centrality (0.25)");
        metricM.add(distDecay25MI);

        distDecay50MI.setAction(actions_stat.STAT_DECAY_50);
        distDecay50MI.setText("Decay Centrality (0.50)");
        metricM.add(distDecay50MI);

        distDecay75MI.setAction(actions_stat.STAT_DECAY_75);
        distDecay75MI.setText("Decay Centrality (0.75)");
        metricM.add(distDecay75MI);

        distDecayCustomMI.setAction(actions_stat.STAT_DECAY_CUSTOM);
        distDecayCustomMI.setText("Decay Centality (CUSTOM)");
        metricM.add(distDecayCustomMI);

        menu.add(metricM);

        helpM.setText("Help");

        aboutMI.setAction(actions.ABOUT_ACTION);
        aboutMI.setText("About");
        helpM.add(aboutMI);

        contentMI.setAction(actions.HELP_ACTION);
        contentMI.setText("Content");
        helpM.add(contentMI);

        menu.add(helpM);

        setJMenuBar(menu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void graphTPStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_graphTPStateChanged
        // update active graph based on selected tab
        Component active = graphTP.getSelectedComponent();
        if (active == null)
            setActiveGraph(null);
        else if (active instanceof PlanePlotComponent) {
            PlanePlotComponent ppc = (PlanePlotComponent) active;
            Plottable[] ps = ppc.getPlottableArray();
            if (ps == null || ps.length == 0) {
                setActiveGraph(null);
                return;
            }

            for (Plottable p : ps)
                if (p instanceof PlaneGraph) {
                    setActiveGraph((PlaneGraph) p);
                    break;
                }

            Graph graph = activeGraph.getGraph();

            // stop animation of energy layout and set to new parameters
            actions_layout.LAYOUT_ENERGY_STOP.actionPerformed(null);
//            if (activeLayout != null)
//                activeLayout.reset(activeGraph.getPositionMap());

            // update properties & tables
            updatePropertyPanel();
//            mainTM.setGraph(graph);

        } else if (active instanceof LongitudinalGraphPanel) {

            LongitudinalGraphPanel lgp = (LongitudinalGraphPanel) active;
            setActiveGraph(lgp.getPlaneGraph());
            if (activeGraph == null)
                return;

            Graph graph = activeGraph.getGraph();

            // stop animation of energy layout and set to new parameters
            actions_layout.LAYOUT_ENERGY_STOP.actionPerformed(null);
//            if (activeLayout != null)
//                activeLayout.reset(activeGraph.getPositionMap());

            // update properties & tables
            updatePropertyPanel();
//            mainTM.setGraph(graph);
        }
    }//GEN-LAST:event_graphTPStateChanged

    private void mainTMTableChanged(javax.swing.event.TableModelEvent evt) {//GEN-FIRST:event_mainTMTableChanged
        // only look at individual cell updates
        if (evt.getType() == TableModelEvent.UPDATE && evt.getColumn() != TableModelEvent.ALL_COLUMNS && evt.getFirstRow() != TableModelEvent.HEADER_ROW)
            activeGraph.setLabel(evt.getFirstRow(), (String) mainTM.getValueAt(evt.getFirstRow(), evt.getColumn()));
    }//GEN-LAST:event_mainTMTableChanged

    private void metricCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metricCBActionPerformed
//        if (activeGraph != null)
//            actions_stat.actionPerformed((ExplorerStatActions.StatEnum) metricCB.getSelectedItem(), evt);
    }//GEN-LAST:event_metricCBActionPerformed

    private void energyTBBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_energyTBBActionPerformed
        if (activeGraph == null || activeGraph.getGraph() == null)
            energyTBB.setSelected(false);
        boolean status = energyTBB.isSelected();
        if (status) {
            actions_layout.LAYOUT_ENERGY_START.actionPerformed(evt);
            energyTBB.setText("Pause");
        } else {
            actions_layout.LAYOUT_ENERGY_STOP.actionPerformed(evt);
            energyTBB.setText("Play");
        }

    }//GEN-LAST:event_energyTBBActionPerformed

    private void cooperationMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cooperationMIActionPerformed
        if (activeGraph == null || activeGraph.getGraph() == null)
            return;
        CooperationPanel cp = new CooperationPanel();
        JDialog dialog = new JDialog(this, true);
        dialog.add(cp);
        dialog.pack();
        dialog.setVisible(true);
        // wait until user closes
        NodeMetric m = cp.getMetric();
        Collection<Integer> subset = cp.getSubset();
        CooperationSubsetMetric m1 = new CooperationSubsetMetric(new AdditiveSubsetMetric(m));
        CooperationSubsetMetric m2 = new CooperationSubsetMetric(new ContractiveSubsetMetric(m));
        double[] v1 = m1.getValue(activeGraph.getGraph(), subset);
        double[] v2 = m2.getValue(activeGraph.getGraph(), subset);
        output("Computed additive metric with " + m + "   : selfish = " + v1[0] + ", altruistic = " + v1[1] + ", total = " + (v1[0]+v1[1]));
        output("Computed contractive metric with " + m + ": selfish = " + v2[0] + ", altruistic = " + v2[1] + ", total = " + (v2[0]+v2[1]));
    }//GEN-LAST:event_cooperationMIActionPerformed

    private void newTBBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newTBBActionPerformed
        newPM.show(newTBB, 5, 5);
    }//GEN-LAST:event_newTBBActionPerformed

    private void metricCB1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metricCB1ActionPerformed
        metricCB.setSelectedItem(metricCB1.getSelectedItem());
        metricCBActionPerformed(evt);
    }//GEN-LAST:event_metricCB1ActionPerformed

    private void layoutTBBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_layoutTBBActionPerformed
        layoutPM.show(layoutTBB, 5, 5);
    }//GEN-LAST:event_layoutTBBActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
                new GraphExplorerMain_backup().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMI;
    private javax.swing.JPanel boxP1;
    private javax.swing.JPanel boxP2;
    private javax.swing.JPanel boxP3;
    private javax.swing.JPanel boxP4;
    private javax.swing.JPanel boxPanel;
    private javax.swing.JTabbedPane boxTP1;
    private javax.swing.JMenuItem circleMI;
    private javax.swing.JMenuItem circleMI1;
    private javax.swing.JMenuItem circularMI;
    private javax.swing.JMenuItem circularMI1;
    private javax.swing.JMenuItem closeMI;
    private javax.swing.JMenuItem completeMI;
    private javax.swing.JMenuItem completeMI1;
    private javax.swing.JMenuItem contentMI;
    private javax.swing.JMenuItem cooperationMI;
    private javax.swing.JMenuItem distClique2MI;
    private javax.swing.JMenuItem distClique2MI1;
    private javax.swing.JMenuItem distClique2MI2;
    private javax.swing.JMenuItem distCliqueMI;
    private javax.swing.JMenuItem distDecay25MI;
    private javax.swing.JMenuItem distDecay50MI;
    private javax.swing.JMenuItem distDecay75MI;
    private javax.swing.JMenuItem distDecayCustomMI;
    private javax.swing.JMenuItem distDegree2MI;
    private javax.swing.JMenuItem distDegreeMI;
    private javax.swing.JTable distributionTable;
    private javax.swing.JScrollPane distributionTableSP;
    private data.propertysheet.PropertySheet edgePS;
    private javax.swing.JMenuItem emptyMI;
    private javax.swing.JMenuItem emptyMI1;
    private javax.swing.JMenuItem energyIterateMI;
    private javax.swing.JMenu energyM;
    private javax.swing.JMenuItem energyStartMI;
    private javax.swing.JMenuItem energyStartMI1;
    private javax.swing.JMenuItem energyStopMI;
    private javax.swing.JToggleButton energyTBB;
    private javax.swing.JMenu exportM;
    private javax.swing.JMenuItem exportQTMI;
    private javax.swing.JMenu fileM;
    private javax.swing.JTabbedPane graphTP;
    private javax.swing.JMenu helpM;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private data.propertysheet.PropertySheet labelPS;
    private javax.swing.JMenu layoutM;
    private javax.swing.JPopupMenu layoutPM;
    private data.propertysheet.PropertySheet layoutPS;
    private javax.swing.JButton layoutTBB;
    private javax.swing.JMenuItem loadEdgeListMI;
    private javax.swing.JMenu loadM;
    private javax.swing.JMenuItem loadPajekMI;
    private javax.swing.JMenuItem loadPajekMI1;
    private javax.swing.JMenuItem loadPajekMI2;
    private javax.swing.JMenuItem loadPajekXLongMI;
    private javax.swing.JMenuItem loadPajekXMI;
    private javax.swing.JButton loadTBB;
    private javax.swing.JSplitPane mainSP;
    private graphexplorer.GraphTableModel mainTM;
    private javax.swing.JTable mainTable;
    private javax.swing.JPanel mainTableP;
    private javax.swing.JScrollPane mainTableSP;
    private javax.swing.JToolBar mainTableTB;
    private javax.swing.JMenuBar menu;
    private javax.swing.JComboBox metricCB;
    private javax.swing.JComboBox metricCB1;
    private javax.swing.JLabel metricL;
    private javax.swing.JMenu metricM;
    private javax.swing.JMenu newM;
    private javax.swing.JPopupMenu newPM;
    private javax.swing.JButton newTBB;
    private data.propertysheet.PropertySheet nodePS;
    private javax.swing.JScrollPane outputSP;
    private javax.swing.JTextPane outputTP;
    private javax.swing.JMenuItem preferentialMI;
    private javax.swing.JMenuItem preferentialMI1;
    private gui.RollupPanel propertyRP;
    private javax.swing.JScrollPane propertySP;
    private javax.swing.JMenuItem quitMI;
    private javax.swing.JMenuItem randomMI;
    private javax.swing.JMenuItem randomMI1;
    private javax.swing.JMenuItem saveEdgeListMI;
    private javax.swing.JMenuItem savePajekMI;
    private javax.swing.JMenuItem savePajekMI1;
    private javax.swing.JMenuItem savePajekXMI;
    private javax.swing.JMenuItem savePajekXMI1;
    private javax.swing.JMenuItem savePajekXMI2;
    private javax.swing.JButton saveTBB;
    private javax.swing.JMenuItem starMI;
    private javax.swing.JMenuItem starMI1;
    private javax.swing.JToolBar toolbar;
    private javax.swing.JMenuItem uniform1MI;
    private javax.swing.JMenuItem uniform1MI1;
    private javax.swing.JMenuItem wheelMI;
    private javax.swing.JMenuItem wheelMI1;
    // End of variables declaration//GEN-END:variables

    /** Updates the property panel with active graph and energy layout */
    void updatePropertyPanel() {
        propertyRP.removeAll();
        if (activeGraph != null) {
//            if (graphBean != null)
//                graphBean.removeChangeListener(this);
            graphBean = new PlaneGraphBean(activeGraph);
//            graphBean.addChangeListener(this);
            propertyRP.add(nodePS = new PropertySheet(graphBean.nodeBean()), "Node Settings");
            propertyRP.add(edgePS = new PropertySheet(graphBean.edgeBean()), "Edge Settings");
            propertyRP.add(labelPS = new PropertySheet(graphBean.labelBean()), "Label Settings");
        }
//        if (activeLayout != null)
//            propertyRP.add(layoutPS = new PropertySheet(activeLayout), "Energy layout parameters");
    }

    /**
     * Sets table model for the distribution table. Also updates the displayed chart.
     * @param model the model for the table displaying values; also used for the chart's values
     * @param barWidth width of the bars displayed in the chart
     */
    <N extends Number> void setActiveMetric(NodeMetric<N> metric, String metricName) {
        if (activeGraph == null)
            return;

        Graph graph = activeGraph.getGraph();
        int n = graph.order();

        // update main table
//        if (mainTM.getGraph() != graph)
//            mainTM.initialize(graph, metric);
//        else
//            mainTM.setMetric(metric);

        List<Number> values = mainTM.values;

        // update visual node sizes
        double[] data1 = new double[n];
        double max = 0;
        for(int i = 0; i < n; i++) {
            data1[i] = Math.sqrt(values.get(i).doubleValue());
            max = Math.max(max, data1[i]);
        }
        activeGraph.setNodeValues(data1);
        graphBean.nodeBean().setSize(8/max);

        // update distribution table & data for chart
        DistributionTableModel model = new DistributionTableModel(values);
        distributionTable.setModel(model);
        boxP3.add(distributionTableSP, BorderLayout.CENTER);
        boxPanel.validate();

        int[] counts = model.counts;
        int nSamples = counts.length;
        double[][] data = new double[6][counts.length];
        double x, y;
        for (int i = 0; i < nSamples; i++) {
            x = ((Number)model.values[i]).doubleValue();
            y = model.counts[i];
            data[0][i] = data[1][i] = data[2][i] = x;
            data[3][i] = data[5][i] = y;
            data[4][i] = 0;
        }

        // set up the chart
        DefaultIntervalXYDataset chartData = new DefaultIntervalXYDataset();
            chartData.addSeries(metricName + " counts", data);
        NumberAxis xAxis = new NumberAxis(metricName);
            xAxis.setAutoRangeIncludesZero(false);
        NumberAxis yAxis = new NumberAxis("Number of Nodes");
        YIntervalRenderer renderer = new YIntervalRenderer();
        renderer.setBaseToolTipGenerator(new org.jfree.chart.labels.StandardXYToolTipGenerator());
        XYPlot plot = new XYPlot(chartData, xAxis, yAxis, renderer);
            plot.setOrientation(PlotOrientation.VERTICAL);
        distributionCP.setChart(new JFreeChart(
                metricName + " distribution", JFreeChart.DEFAULT_TITLE_FONT,
                plot, false));

//        double[][] data = new double[2][counts.length];
//        for (int i = 0; i < nSamples; i++) {
//            data[0][i] = ((Number)model.values[i]).doubleValue();
//            data[1][i] = model.counts[i];
//        }
//        distributionCP.setChart(
//                ChartFactory.createXYBarChart(metricName + " Distribution",
//                metricName, false,
//                "Number of Nodes", new XYBarDataset(data, .9),
//                PlotOrientation.VERTICAL, false, true, false));
    }

    //
    // UTILITIES
    //

    public void output(String output) {
        Document d = outputTP.getDocument();
        try {
            d.insertString(d.getLength(), output + "\n\n", null);
        } catch (BadLocationException ex) {
            Logger.getLogger(GraphExplorerMain_backup.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //
    // PROPERTY GETTERS
    //

    public Component dialogComponent() {
        return this;
    }

    public Component activePanel() {
        return graphTP.getSelectedComponent();
    }

    public boolean isLongitudinal() {
        return graphTP.getSelectedComponent() != null && graphTP.getSelectedComponent() instanceof LongitudinalGraphPanel;
    }

    public Graph activeGraph() {
        return activeGraph == null ? null : activeGraph.getGraph();
    }

    public Map<Object, Point2D.Double> getActivePoints() {
        return activeGraph == null ? null : activeGraph.getPositionMap();
    }

    public <V> void setActivePoints(Map<V, Point2D.Double> pos) {
        if (activeGraph != null)
            activeGraph.setPositionMap(pos);
    }


    //
    // INPUT/OUTPUT
    //

    /** Loads a graph into the explorer, by creating a new tabbed window that displays it. */
    public void loadGraph(Graph sg, String name) {
        stopLayout();
//        newPositions = null;
        PlanePlotComponent ppc = new PlanePlotComponent();
        setActiveGraph(new PlaneGraph(sg));
        ppc.add(activeGraph);
        graphTP.add(name, ppc);
        graphTP.setSelectedComponent(ppc);
//        if (mainTM.getGraph() != sg)
//            mainTM.setGraph(sg);
        output("Successfully loaded graph " + name + " with " + sg.order() + " vertices and " + sg.edgeNumber() + " edges.");
    }

    public void loadLongitudinalGraph(LongitudinalGraph lg, String name) {
        stopLayout();
//        newPositions = null;
        LongitudinalGraphPanel lgp = new LongitudinalGraphPanel(lg);
        setActiveGraph(lgp.getPlaneGraph());
        graphTP.add(name, lgp);
        graphTP.setSelectedComponent(lgp);
        Graph slice = lgp.getActiveSlice();
//        if (mainTM.getGraph() != slice)
//            mainTM.setGraph(slice);
        output("Successfully loaded longitudinal graph " + name
                + " with time domain [" + lg.getMinimumTime() + ", " + lg.getMaximumTime() + "]"
                + " and initial slice with " + slice.order() + " vertices and " + slice.edgeNumber() + " edges.");
    }

    public void closeActiveGraph() {
        stopLayout();
        activeGraph = null;
//        mainTM.setGraph(null);
        graphTP.remove(graphTP.getSelectedComponent());
    }

    //
    // HANDLE CHANGES TO GRAPH
    //

    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getSource() == controller) {
            if (evt.getPropertyName().equals("active")) {

            } else if (evt.getPropertyName().equals("output")) {
                output((String) evt.getNewValue());
            }
        } else if (evt.getSource() == controller.getActiveController()) {
            if (evt.getPropertyName().equals("output")) {

            }
        }
    }

    public <V> void initLayout(StaticGraphLayout layout, double... parameters) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void initLayout(IterativeGraphLayout layout) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void animateLayout() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void adjustLayout(StaticGraphLayout layout, double... parameters) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void iterateLayout() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void stopLayout() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    private void setActiveGraph(Object object) {
        throw new UnsupportedOperationException("Not yet implemented");
    }

    public GraphController activeController() {
        throw new UnsupportedOperationException("Not supported yet.");
    }


}
