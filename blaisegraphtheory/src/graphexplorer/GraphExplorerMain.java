/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GraphExplorerMain.java
 *
 * Created on May 14, 2010, 10:10:30 AM
 */

package graphexplorer;

import data.propertysheet.editor.EditorRegistration;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import org.bm.blaise.scio.graph.SimpleGraph;
import org.bm.blaise.specto.plane.graph.PlaneGraph;
import visometry.plane.PlanePlotComponent;
import visometry.plottable.Plottable;

/**
 *
 * @author ae3263
 */
public class GraphExplorerMain extends javax.swing.JFrame {

    GraphExplorerActions actions;
    PlaneGraph activeGraph;

    /** Creates new form GraphExplorerMain */
    public GraphExplorerMain() {
        try { UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); } catch (Exception e) { }
        EditorRegistration.registerEditors();
        actions = new GraphExplorerActions(this);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        outputTP = new javax.swing.JTextPane();
        graphTP = new javax.swing.JTabbedPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        graphSP = new javax.swing.JSplitPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        graphT = new javax.swing.JTable();
        adjacencyP = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        metricT = new javax.swing.JTable();
        statP = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        propertyRP = new gui.RollupPanel();
        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileM = new javax.swing.JMenu();
        loadMI = new javax.swing.JMenuItem();
        saveMI = new javax.swing.JMenuItem();
        closeMI = new javax.swing.JMenuItem();
        quitMI = new javax.swing.JMenuItem();
        generateM = new javax.swing.JMenu();
        specialM = new javax.swing.JMenu();
        emptyMI = new javax.swing.JMenuItem();
        circleMI = new javax.swing.JMenuItem();
        wheelMI = new javax.swing.JMenuItem();
        completeMI = new javax.swing.JMenuItem();
        randomM = new javax.swing.JMenu();
        uniform1MI = new javax.swing.JMenuItem();
        uniform2MI = new javax.swing.JMenuItem();
        preferentialMI = new javax.swing.JMenuItem();
        layoutM = new javax.swing.JMenu();
        circularMI = new javax.swing.JMenuItem();
        randomMI = new javax.swing.JMenuItem();
        energyMI = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Graph Explorer");

        outputTP.setBackground(new java.awt.Color(0, 0, 0));
        outputTP.setForeground(new java.awt.Color(204, 204, 255));
        outputTP.setText("== Output ==");
        outputTP.setPreferredSize(new java.awt.Dimension(500, 200));
        jScrollPane2.setViewportView(outputTP);

        getContentPane().add(jScrollPane2, java.awt.BorderLayout.PAGE_END);

        graphTP.setPreferredSize(new java.awt.Dimension(500, 500));
        graphTP.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                graphTPStateChanged(evt);
            }
        });
        getContentPane().add(graphTP, java.awt.BorderLayout.CENTER);

        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(300, 400));

        graphSP.setDividerLocation(200);
        graphSP.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        graphT.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Index", "Label", "Object"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(graphT);

        graphSP.setLeftComponent(jScrollPane3);

        adjacencyP.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("...adjacency matrix display...");
        adjacencyP.add(jLabel1, java.awt.BorderLayout.CENTER);

        graphSP.setRightComponent(adjacencyP);

        jTabbedPane1.addTab("Vertices & Adjacencies", graphSP);

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setResizeWeight(0.5);

        metricT.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(metricT);

        jSplitPane1.setTopComponent(jScrollPane4);

        statP.setLayout(new java.awt.BorderLayout());

        jLabel2.setText("...statistics plot here...");
        statP.add(jLabel2, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(statP);

        jTabbedPane1.addTab("Metrics & Statistics", jSplitPane1);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.EAST);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(200, 400));
        jScrollPane1.setViewportView(propertyRP);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.WEST);

        jToolBar1.setRollover(true);

        jButton1.setText("toolbar button");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton1);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);

        fileM.setText("File");

        loadMI.setAction(actions.LOAD_ACTION);
        loadMI.setText("Load graph from file");
        fileM.add(loadMI);

        saveMI.setText("Save current graph to file");
        fileM.add(saveMI);

        closeMI.setText("Close current graph");
        fileM.add(closeMI);

        quitMI.setText("Quit");
        fileM.add(quitMI);

        jMenuBar1.add(fileM);

        generateM.setText("Generate");

        specialM.setText("Special Graph");

        emptyMI.setText("Empty Graph");
        specialM.add(emptyMI);

        circleMI.setText("Circle Graph");
        specialM.add(circleMI);

        wheelMI.setText("Wheel Graph");
        specialM.add(wheelMI);

        completeMI.setText("Complete Graph");
        specialM.add(completeMI);

        generateM.add(specialM);

        randomM.setText("Random Graph");

        uniform1MI.setText("Uniform (by edge probability)");
        randomM.add(uniform1MI);

        uniform2MI.setText("Uniform (by number of edges)");
        randomM.add(uniform2MI);

        preferentialMI.setText("Preferential Attachment");
        randomM.add(preferentialMI);

        generateM.add(randomM);

        jMenuBar1.add(generateM);

        layoutM.setText("Layout");

        circularMI.setAction(actions.LAYOUT_CIRCULAR);
        circularMI.setText("Circular");
        layoutM.add(circularMI);

        randomMI.setAction(actions.LAYOUT_RANDOM);
        randomMI.setText("Random");
        layoutM.add(randomMI);

        energyMI.setText("Energy");
        layoutM.add(energyMI);

        jMenuBar1.add(layoutM);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void graphTPStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_graphTPStateChanged
        // update active graph based on selected tab
        PlanePlotComponent ppc = (PlanePlotComponent) graphTP.getSelectedComponent();
        Plottable[] ps = ppc.getPlottableArray();
        if (ps == null || ps.length == 0)
            activeGraph = null;
        else
            for (Plottable p : ps)
                if (p instanceof PlaneGraph) {
                    activeGraph = (PlaneGraph) p;
                    return;
                }
        activeGraph = null;
    }//GEN-LAST:event_graphTPStateChanged

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
                new GraphExplorerMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel adjacencyP;
    private javax.swing.JMenuItem circleMI;
    private javax.swing.JMenuItem circularMI;
    private javax.swing.JMenuItem closeMI;
    private javax.swing.JMenuItem completeMI;
    private javax.swing.JMenuItem emptyMI;
    private javax.swing.JMenuItem energyMI;
    private javax.swing.JMenu fileM;
    private javax.swing.JMenu generateM;
    private javax.swing.JSplitPane graphSP;
    private javax.swing.JTable graphT;
    private javax.swing.JTabbedPane graphTP;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenu layoutM;
    private javax.swing.JMenuItem loadMI;
    private javax.swing.JTable metricT;
    private javax.swing.JTextPane outputTP;
    private javax.swing.JMenuItem preferentialMI;
    private gui.RollupPanel propertyRP;
    private javax.swing.JMenuItem quitMI;
    private javax.swing.JMenu randomM;
    private javax.swing.JMenuItem randomMI;
    private javax.swing.JMenuItem saveMI;
    private javax.swing.JMenu specialM;
    private javax.swing.JPanel statP;
    private javax.swing.JMenuItem uniform1MI;
    private javax.swing.JMenuItem uniform2MI;
    private javax.swing.JMenuItem wheelMI;
    // End of variables declaration//GEN-END:variables


    /** Adds a message to the output window. */
    void output(String output) {
        Document d = outputTP.getDocument();
        try {
            d.insertString(d.getLength(), output, null);
        } catch (BadLocationException ex) {
            Logger.getLogger(GraphExplorerMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /** Loads a graph into the explorer, by creating a new tabbed window that displays it. */
    void loadGraph(SimpleGraph sg, String name) {
        PlanePlotComponent ppc = new PlanePlotComponent();
        ppc.add(activeGraph = new PlaneGraph(sg));
        graphTP.add(name, ppc);
        graphTP.setSelectedComponent(ppc);
    }
}
