#summary Architecture & coding conventions for BlaiseGraphics

= Dependencies =
BlaiseGraphics uses JDK 1.6+, and depends on the [https://code.google.com/p/guava-libraries/ guava library] and jsr305 for building.

= Packages =
 * `org.blaise.graphics` - graphics object and scene tree, depends on style and utility packages
 * `org.blaise.style` - self-contained style classes, uses the utility library
 * `org.blaise.util` - self-contained utility library

= Style Library =
== Style Classes ==
The primary classes in the style library are the style classes:
 * `ShapeStyle` (I)
  * `BasicShapeStyle`
 * `PathStyle` (I) (extends `ShapeStyle`)
  * `BasicPathStyle`
   * `ArrowPathStyle`
   * `BezierPathStyle`
   * `DecoratorPathStyle`
 * `StringStyle` (I)
  * `BasicStringStyle`
   * `WrappingStringStyle`
 * `PointStyle` (I)
  * `PointStyleSupport`
   * `BasicPointStyle`
    * `InfinitePointStyle`
   * `DecoratorPointStyle`
  * `LabeledPointStyle`

These classes obey the following conventions:
 * _bean pattern_ (no-argument constructor, with get/set property methods)
 * property names are aligned where possible with SVG attribute names
 * toString() method implemented
 * clone() method implemented
 * _builder pattern_ for quickly setting properties
 * `@Nullable` annotations indicating whether null properties are permitted

Additionally, the names follow the conventions:
 * "Basic" style classes are simple objects with necessary style attributes.
 * "Decorator" style classes defer some of their style attributes to an underlying class, possibly in an indirect way (e.g. some attributes may be multiplicative).
 * "Support" style classes are generally abstract, partial implementations of style classes.

== Context Classes ==
Context classes are:
 * `StyleContext` (I)
  * `DefaultStyleContext`
  * `DelegatingStyleContext`
These are essentially factory classes providing instances of the four main style types.

== `ObjectStyler` ==
The `ObjectStyler` class provides several _delegate_ functions used to generate styles for an object of arbitrary type, specifically for _labels_, _label style_, _object style_, and _tooltip_.

== Markers ==
Markers are objects used to draw a shape at a given location and orientation.
 * `Marker` - generates shapes at a given point
 * `MarkerLibrary` - contains several instances of `Marker`

== `VisibilityHint` ==
`VisibilityHint` is a render hint that is disjoint from styles and is universal, similar to a _CSS class_. It may be used, e.g. to highlight a collection of shapes. Styles are responsible for how they handle different hints. The class `VisibilityHintSet` aggregates a collection of hints into a single object, with event handling support.

== Factory and utility methods ==
The `Styles` class is a factory class providing simple methods for creating basic style objects. The `StyleUtils` provides some basic color manipulation capability, as well as support for modifying colors based on `VisibilityHint`s.




-----
= Graphics Library =
In general, `Graphic` objects combine the state information (e.g. location, shape, etc.) with the style information used to draw them. All graphics provide support for:
 * drawing on a {@link Graphics2D} canvas
 * "visibility hints", e.g. highlight
 * location testing (bounding box & rectangle intersect)
 * selection
 * tooltips
 * context menu
 * mouse handling

Graphics are put together in a "scene graph" using composite classes, and are added to a `GraphicRoot` object that is owned by a `GraphicComponent`.

== General `Graphic` Objects ==
The general graphics classes are:
 * `Graphic` (I)
  * `GraphicSupport`
   * `GraphicComposite`
    * `GraphicRoot`
 * `GraphicComponent`

`GraphicSupport` implements all functionality on `Graphic`, with the exception of the _draw_, _contains_, and _intersects_ methods. It also adds support for multiple `ContextMenuInitializer`s, _highlighting_ on mouseover events, a _default tooltip_, and an _event trigger_ notifying the parent graphic when its state/style has changed. It provides flags for enabling/disabling _tooltips_, _menus_, _mouse listening_, and _selection_.

`GraphicComposite` maintains a list of graphics and a `StyleContext`. Its primary responsibility is to defer supported functionality to its children. It also listens to changes from its children.

`GraphicRoot` hooks up a tree of graphic objects to a `GraphicComponent`. It maintains a root `StyleContext`, the component's popup menu, and the conversion and delegation of `MouseEvent`s to `GraphicMouseEvent`s. It cannot be added to another `GraphicComposite`. It also asks the component to repaint whenever a graphic in its tree has changed.

`GraphicComponent` maintains a `GraphicRoot`, a set of _underlays_ and _overlays_ (`CanvasPainter` objects), and a `SetSelectionModel` with a set of selected graphics.

== `Graphic` Implementations ==
The following implementations of `Graphic` are all derived from the `GraphicSupport` base class:
 * `AbstractPointGraphic`
  * `BasicPointGraphic`
  * `DelegatingPointGraphic`
 * `AbstractShapeGraphic`
  * `BasicShapeGraphic`
  * `DelegatingShapeGraphic`
   * `LabeledShapeGraphic`
 * `BasicPointSetGraphic`
 * `BasicStringGraphic`
In addition, the following composite graphics are derived from `GraphicComposite`:
 * `DelegatingEdgeSetGraphic`
 * `DelegatingNodeLinkGraphic`
 * `DelegatingPointSetGraphic`

The naming convention followed above:
 * `Abstract` classes provide partial support, primarily the state of the graphic object to be represented.
 * `Basic` classes contain one of the main style classes directly as a property.
 * `Delegating` classes defer style, labels, and tooltips to an `ObjectStyler` class.

== Mouse Handling ==
The `GraphicRoot` class is responsible for delegating mouse events to graphic objects beneath the mouse. Rather than regular `MouseEvent`s, it passes `GraphicMouseEvent`s that indicate the source `Graphic` of the event. Classes supporting mouse handling are:
 * `GraphicMouseEvent` - wraps a `MouseEvent` to include a `Graphic`
 * `GraphicMouseEvent.Factory` - creates a `GraphicMouseEvent` from a source `Graphic` and `MouseEvent` (intended to be overridden to customize the event beyond what is supported by the default `GraphicMouseEvent`)

=== Dragging ===
Additional classes are provided to simplify drag gestures:
 * `AbstractGraphicDragger` - provides supporting functionality for dragging graphics, translating general mouse handling methods to drag methods _mouseDragInitiated_, _mouseDragInProgress_, and _mouseDragCompleted_ that take as arguments `GraphicMouseEvent`s and the starting `Point` of the drag gesture
  * `PointBeanDragger` - constructed with a `PointBean` or `DraggablePointBean` to provide drag support (e.g. used in `AbstractPointGraphic` to provide default draggability of points)
  * `IndexedPointBeanDragger` - constructed with a `IndexedPointBean` or `IndexedDraggablePointBean` to provide drag support

=== Selection ===
Selection of graphics is built into `GraphicComponent`, but is enabled by default. The following class provides the mouse handling supporting selection of graphic objects:
 * `GraphicSelector`
The selector also implements `CanvasPainter`, allowing a selection box to be drawn on the component.

=== Highlighting ===
 * `GraphicHighlighter` - changes the _highlight_ visibility hint as the mouse enters or exits graphics; enabled by default in `GraphicSupport`, but can also be disabled.


-----
= Utility Library =
== Coordinate Handling ==
 * `CoordinateManager` - maintains a collection of points associated with source objects, as well as a cache of "stale" values for points no longer maintained in the collection
 * `CoordinateListener` - listener interface notified when coordinates within the manager change
 * `CoordinateChangeEvent` - may indicate add, remove, or combined add/remove of objects and points in the CoordinateManager

== Mouse Handling ==
 * `PointBean` - marks a class as having a point attribute
 * `DraggablePointBean` - provides a setPoint method used for drag gestures
 * `IndexedPointBean` - marks a class as having an indexed point attribute
 * `DraggableIndexedPointBean` - provides an indexed setPoint method used for drag gestures on one of many points in an object

== Selection ==
`SetSelectionModel` maintains a thread-safe set of selected items, and notifies listeners of changes to the set.

== Formatting ==
`PointFormatters` is a utility library for formatting Points and Point2Ds.

== Graph structures == 
`Edge` is a data structure with two vertices of common type, as typically used within a graph data structure.

== Graphics canvas ==
`CanvasPainter` is an interface with a method for painting on a `Graphics2D` canvas on a `Component`. This is primarily used in BlaiseGraphics as a lightweight method to render overlays like a selection box.

== Context menu ==
`ContextMenuInitializer` is an interface for preparing a context menu, whose method _initialize_ is used to populate a context menu with any actions appropriate for its parameters, which include (1) the source object/graphic, (2) the location, (3) a focus object (optional), and (4) a selection of objects (optional). The `Graphic` class extends this interface, and the `GraphicSupport` class allows multiple initializers to be added to a graphic.