/*
 * PermutationEdit.java
 *
 * Created on March 9, 2007, 11:29 AM
 */

package Planar;

import PlanarAlgebra.PermutationModel;
import java.awt.Point;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.EventListenerList;

/**
 *
 * @author  ae3263
 */
public class PermutationEdit extends javax.swing.JPanel {
    /**
     * Creates new form PermutationEdit
     */
    public PermutationEdit() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        pModel = new PlanarAlgebra.PermutationModel();
        geo = new PlanarAlgebra.FiniteGridGeometry();
        pInput = new javax.swing.JTextField();
        pOutput = new javax.swing.JTextField();
        permPlot = new Planar.FiniteGridPlot();
        vp1 = new Planar.VisualPermutation();

        pModel.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                pModelStateChanged(evt);
            }
        });

        geo.setWindow(permPlot);

        pInput.setText("12");
        pInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pInputKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                pInputKeyTyped(evt);
            }
        });

        pOutput.setEditable(false);
        pOutput.setText(pModel.getLongString());

        permPlot.setGeometry(geo);

        vp1.setGeometry(geo);
        vp1.setModel(pModel);

        javax.swing.GroupLayout vp1Layout = new javax.swing.GroupLayout(vp1);
        vp1.setLayout(vp1Layout);
        vp1Layout.setHorizontalGroup(
            vp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 81, Short.MAX_VALUE)
        );
        vp1Layout.setVerticalGroup(
            vp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 46, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout permPlotLayout = new javax.swing.GroupLayout(permPlot);
        permPlot.setLayout(permPlotLayout);
        permPlotLayout.setHorizontalGroup(
            permPlotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(vp1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        permPlotLayout.setVerticalGroup(
            permPlotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(vp1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pInput, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                    .addComponent(pOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(permPlot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(permPlot, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(pInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void pInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pInputKeyReleased
        pInputKeyTyped(evt);
    }//GEN-LAST:event_pInputKeyReleased
    
    private void pModelStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_pModelStateChanged
        pInput.setText(pModel.getShortString());
        pOutput.setText(pModel.getLongString());
        fireStateChanged();
        geo.setMax(new Point(pModel.getLength()-1,1));
        permPlot.repaint();
    }//GEN-LAST:event_pModelStateChanged
    
    private void pInputKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pInputKeyTyped
        pModel.setValue(pInput.getText());
    }//GEN-LAST:event_pInputKeyTyped
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PermutationEdit().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private PlanarAlgebra.FiniteGridGeometry geo;
    private javax.swing.JTextField pInput;
    private PlanarAlgebra.PermutationModel pModel;
    private javax.swing.JTextField pOutput;
    private Planar.FiniteGridPlot permPlot;
    private Planar.VisualPermutation vp1;
    // End of variables declaration//GEN-END:variables
    
    // Getters & Setters
    public void setModel(PermutationModel pm){pModel=new PermutationModel(pm.getValue());}
    public PermutationModel getModel(){return pModel;}
    
    /*
     * The rest of this is event handling code copied from
     * DefaultBoundedRangeModel.
     */      
    protected ChangeEvent changeEvent = null;
    protected EventListenerList listenerList = new EventListenerList();
    
    public void addChangeListener(ChangeListener l) {
        listenerList.add(ChangeListener.class, l);
    }
    
    public void removeChangeListener(ChangeListener l) {
        listenerList.remove(ChangeListener.class, l);
    }
    
    protected void fireStateChanged() {
        Object[] listeners = listenerList.getListenerList();
        for (int i = listeners.length - 2; i >= 0; i -=2 ) {
            if (listeners[i] == ChangeListener.class) {
                if (changeEvent == null) {
                    changeEvent = new ChangeEvent(this);
                }
                ((ChangeListener)listeners[i+1]).stateChanged(changeEvent);
            }
        }
    }
}
